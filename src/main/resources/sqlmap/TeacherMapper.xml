<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.springmvc.dao.TeacherMapper" >
  <resultMap id="BaseResultMap" type="com.springmvc.entity.Teacher" >
    <id column="teacherid" property="teacherid" jdbcType="INTEGER" />
    <result column="teacherName" property="teachername" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="idCard" property="idcard" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="birthday" property="birthday" jdbcType="DATE" javaType="java.sql.Date"/>
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="schoolid" property="schoolid" jdbcType="INTEGER" />
    <result column="collegeId" property="collegeid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    teacherid, teacherName, password, idCard, sex, birthday, tel, address, schoolid, 
    collegeId
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from teacher
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from teacher
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.springmvc.entity.Teacher" >
    insert into teacher (teacherid, teacherName, password, 
      idCard, sex, birthday, 
      tel, address, schoolid, 
      collegeId)
    values (#{teacherid,jdbcType=INTEGER}, #{teachername,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{idcard,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, 
      #{tel,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{schoolid,jdbcType=INTEGER}, 
      #{collegeid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.springmvc.entity.Teacher" >
    insert into teacher
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="teacherid != null" >
        teacherid,
      </if>
      <if test="teachername != null" >
        teacherName,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="idcard != null" >
        idCard,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="tel != null" >
        tel,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="schoolid != null" >
        schoolid,
      </if>
      <if test="collegeid != null" >
        collegeId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="teacherid != null" >
        #{teacherid,jdbcType=INTEGER},
      </if>
      <if test="teachername != null" >
        #{teachername,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="idcard != null" >
        #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=DATE},
      </if>
      <if test="tel != null" >
        #{tel,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="schoolid != null" >
        #{schoolid,jdbcType=INTEGER},
      </if>
      <if test="collegeid != null" >
        #{collegeid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.springmvc.entity.Teacher" >
    update teacher
    <set >
      <if test="teachername != null" >
        teacherName = #{teachername,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="idcard != null" >
        idCard = #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="tel != null" >
        tel = #{tel,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="schoolid != null" >
        schoolid = #{schoolid,jdbcType=INTEGER},
      </if>
      <if test="collegeid != null" >
        collegeId = #{collegeid,jdbcType=INTEGER},
      </if>
    </set>
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springmvc.entity.Teacher" >
    update teacher
    set teacherName = #{teachername,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      idCard = #{idcard,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      tel = #{tel,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      schoolid = #{schoolid,jdbcType=INTEGER},
      collegeId = #{collegeid,jdbcType=INTEGER}
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
  <select id="getTotal" resultType="java.lang.Integer">
    select count(*) from teacher
  </select>
  <select id="list" resultMap="BaseResultMap">
        SELECT * FROM teacher ORDER BY teacherid desc limit #{param1}, #{param2}
    </select>
</mapper>